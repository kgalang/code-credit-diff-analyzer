diff --git a/src/managers/teams.rs b/src/managers/teams.rs
index c92b511..d3a131f 100644
--- a/src/managers/teams.rs
+++ b/src/managers/teams.rs
@@ -1,7 +1,7 @@
 use crate::database::PoolType;
 use crate::errors::ApiError;
 use crate::models::teams::*;
-use crate::schema::{team_owners, team_players, teams};
+use crate::schema::{leagues, team_owners, team_players, teams};
 use diesel::prelude::*;
 use uuid::Uuid;
 
@@ -12,6 +12,16 @@ pub fn get_all(pool: &PoolType) -> Result<TeamsResponse, ApiError> {
     Ok(all_teams.into())
 }
 
+pub fn get_all_in_league(pool: &PoolType, league_id: Uuid) -> Result<TeamsResponse, ApiError> {
+    let conn = pool.get()?;
+    let teams_found = teams::table
+        .select(teams::all_columns)
+        .filter(teams::league_id.eq(league_id.clone()))
+        .load(&conn)?;
+
+    Ok(teams_found.into())
+}
+
 pub fn find(pool: &PoolType, team_id: Uuid) -> Result<TeamDetails, ApiError> {
     let conn = pool.get()?;
 
@@ -46,6 +56,46 @@ pub fn find(pool: &PoolType, team_id: Uuid) -> Result<TeamDetails, ApiError> {
     Ok(found_team_details)
 }
 
+pub fn create(
+    pool: &PoolType,
+    new_team: &Team,
+    new_players: Option<&Vec<Player>>,
+    new_owners: Option<&Vec<Owner>>,
+) -> Result<TeamDetails, ApiError> {
+    let conn = pool.get()?;
+
+    new_team.insert_into(teams::table).execute(&conn)?;
+
+    let mut inserted_players = None;
+    if let Some(new_players) = new_players {
+        inserted_players = diesel::insert_into(team_players::table)
+            .values(new_players)
+            .get_results(&conn)
+            .optional()?;
+    }
+
+    let mut inserted_owners = None;
+    if let Some(new_owners) = new_owners {
+        inserted_owners = diesel::insert_into(team_owners::table)
+            .values(new_owners)
+            .get_results(&conn)
+            .optional()?;
+    }
+
+    let created = TeamDetails {
+        id: new_team.id,
+        league_id: new_team.league_id,
+        name: new_team.name.to_string(),
+        wins: new_team.wins,
+        losses: new_team.losses,
+        ties: new_team.ties,
+        players: inserted_players,
+        owners: inserted_owners,
+    };
+
+    Ok(created)
+}
+
 #[cfg(test)]
 pub mod tests {
     use super::*;
@@ -69,4 +119,63 @@ pub mod tests {
         let teams = get_all_teams();
         assert!(teams.is_ok());
     }
+
+    pub fn create_tournament_with_owner_and_player() -> Result<TeamDetails, ApiError> {
+        let pool = get_pool();
+        // Uuid nil is all 0
+        let league_id = Uuid::nil();
+        let user_id = Uuid::nil();
+        let team_id = Uuid::new_v4();
+
+        let team = Team {
+            id: team_id,
+            name: "Test Team".to_string(),
+            wins: 0,
+            losses: 0,
+            ties: 0,
+            league_id: league_id,
+        };
+
+        let player = Player {
+            id: Uuid::new_v4(),
+            team_id: team_id,
+            user_id: user_id,
+        };
+
+        let owner = Owner {
+            id: Uuid::new_v4(),
+            team_id: team_id,
+            user_id: user_id,
+        };
+
+        create(&pool, &team, Some(&vec![player]), Some(&vec![owner]))
+    }
+    #[test]
+    fn it_creates_team_with_owners_and_players() {
+        let created = create_tournament_with_owner_and_player();
+        assert!(created.is_ok());
+    }
+
+    pub fn create_tournament_without_owner_and_player() -> Result<TeamDetails, ApiError> {
+        let pool = get_pool();
+        // Uuid nil is all 0
+        let league_id = Uuid::nil();
+        let team_id = Uuid::new_v4();
+
+        let team = Team {
+            id: team_id,
+            name: "Test Team".to_string(),
+            wins: 0,
+            losses: 0,
+            ties: 0,
+            league_id: league_id,
+        };
+
+        create(&pool, &team, None, None)
+    }
+    #[test]
+    fn it_creates_team_alone() {
+        let created = create_tournament_without_owner_and_player();
+        assert!(created.is_ok());
+    }
 }
diff --git a/src/models/teams.rs b/src/models/teams.rs
index 9f77ab1..d733aea 100644
--- a/src/models/teams.rs
+++ b/src/models/teams.rs
@@ -15,7 +15,7 @@ pub struct Team {
     pub league_id: Uuid,
 }
 
-#[derive(Debug, Queryable, Identifiable, Associations, AsChangeset)]
+#[derive(Debug, Queryable, Identifiable, Associations, AsChangeset, Insertable)]
 #[belongs_to(Team)]
 #[table_name = "team_owners"]
 pub struct Owner {
@@ -24,7 +24,7 @@ pub struct Owner {
     pub team_id: Uuid,
 }
 
-#[derive(Debug, Queryable, Identifiable, Associations, AsChangeset)]
+#[derive(Debug, Queryable, Identifiable, Associations, AsChangeset, Insertable)]
 #[belongs_to(Team)]
 #[table_name = "team_players"]
 pub struct Player {
